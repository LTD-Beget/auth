syntax = 'proto3';

package beget.auth.v1.auth;

import "google/api/annotations.proto";

// Аутентификация
//
// Сервис предоставляет набор методов для работы с токеном аутентификации, используемом для
// доступа в панель управления и к API: cp.beget.com и api.beget.com
service AuthService {
    // Получить JWT токен
    //
    // Выполняет вход в аккаунт и выдает JWT токен, который далее может быть использован для аутентификации запросов в API.
    //
    // При отключенной двухфакторной аутентификации (2FA) поле `code` не используется и не должно передаваться в запросе.
    //
    // При включенной двухфакторной аутентификации (2FA) первоначальный запрос к данному методу вернет ошибку с кодом
    // `CODE_REQUIRED_EMAIL` или `CODE_REQUIRED_SMS`, а на соответствующий адрес 2FA придет код. Для получения токена
    // необходимо выполнить повторный запрос этого же метода, добавив к уже введенным данным полученный код в поле `code`.
    rpc auth(AuthRequest) returns (AuthResponse) {
        option (google.api.http) = {
			post: "/v1/auth"
			body: "*"
		};
    }

    // Обновить JWT токен
    //
    // Продлевает действие текущего JWT токена.
    rpc refreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
			post: "/v1/auth/refresh"
		};
    }

    // Получить JWT токен подчиненного аккаунта
    //
    // Выполняет вход в аккаунт, входящий в группу мульти-аккаунтов, и выдает для него JWT токен,
    // который далее может быть использован для аутентификации запросов в API.
    //
    // При отключенной двухфакторной аутентификации (2FA) на подчиненном аккаунте поле `code` не используется
    // и не должно передаваться в запросе.
    //
    // При включенной двухфакторной аутентификации (2FA) на подчиненном аккаунте, поле `code` действует таким же
    // образом, как одноименное поле в методе "Получить JWT токен" из API "Аутентификация".
    rpc switchUser(SwitchUserRequest) returns (SwitchUserResponse) {
        option (google.api.http) = {
			post: "/v1/auth/switch"
			body: "*"
		};
    }

    // Отозвать JWT токен
    //
    // Отзывает JWT токен, делая его невалидным для дальнейших запросов.
    rpc logout(LogoutRequest) returns (LogoutResponse) {
        option (google.api.http) = {
			post: "/v1/auth/logout"
		};
    }
}

message AuthRequest {
    // Имя пользователя
    string login = 1;

    // Пароль
    string password = 2;

    // Код двухфакторной аутентификации (необязательное поле, см. описание метода)
    string code = 3;

    // Выдать токен на 1 год
    bool saveMe = 4;
}

message AuthResponse {
    // Результат запроса
    oneof response {
        // Результат запроса: JWT токен
        string token = 1;

        // Результат запроса: ошибка аутентификации
        ErrorStatus error = 2;
    }

    enum ErrorStatus {
        // Внутрення ошибка
        INTERNAL_ERROR = 0;

        // Пустое имя пользователя
        EMPTY_LOGIN = 1;

        // Пустой пароль
        EMPTY_PASSWORD = 2;

        // Неправильное имя пользователя или пароль
        INCORRECT_CREDENTIALS = 3;

        // Доступ с данного IP адреса запрещен
        IP_BLOCKED = 4;

        // Требуется код двухфакторной аутентификации
        CODE_REQUIRED = 5;

        // Неверный код двухфакторной аутентификации
        INCORRECT_CODE = 6;

        // Превышен лимит отправки сообщений с кодом двухфакторной аутентификации для этого аккаунта
        CODE_SENT_LIMIT = 7;

        // Превышено количество попыток ввода кода двухфакторной аутентификации
        CODE_INPUT_LIMIT = 8;

        // Временные работы, доступ запрещен
        ACCOUNT_ON_MAINTANCE = 9;

        // Аккаунт удален
        ACCOUNT_DELETED = 10;

        // Требуется дополнительно ввести код безопасности отправленный по email
        CODE_REQUIRED_EMAIL = 11;

        // Требуется дополнительно ввести код безопасности отправленный по sms
        CODE_REQUIRED_SMS = 12;
    }
}

message SwitchUserRequest {
    // Имя пользователя
    string login = 1;

    // Пароль
    string password = 2;

    // Код двухфакторной аутентификации (необязательное поле, см. описание метода)
    string code = 3;
}

message SwitchUserResponse {
    // Результат запроса
    oneof response {
        // Результат запроса: JWT Токен
        string token = 1;

        // Результат запроса: ошибка при получении токена
        ErrorStatus error = 2;
    }

    enum ErrorStatus {
        // Внутренняя ошибка
        INTERNAL_ERROR = 0;

        // Пустое имя пользователя
        EMPTY_TARGET_LOGIN = 1;

        // Выдача токена для аккаунта запрещена
        TARGET_FORBIDDEN = 2;

        // Аккаунт не существует
        TARGET_NOT_FOUND = 3;

        // Пустой пароль
        TARGET_PASSWORD_REQUIRED = 4;

        // Требуется код двухфакторной аутентификации
        TARGET_CODE_REQUIRED = 5;

        // Неверный код двухфакторной аутентификации
        TARGET_INCORRECT_CODE = 6;

        // Превышен лимит отправки сообщений с кодом двухфакторной аутентификации для этого аккаунта.
        SENT_LIMIT_REACHED = 7;

        // Превышено количество попыток ввода кода двухфакторной аутентификации
        INPUT_LIMIT_REACHED = 8;

        // Временные работы, доступ запрещен
        TARGET_ON_MAINTENANCE = 9;

        // Аккаунт удален
        TARGET_DELETED = 10;

        // Токен был отозван
        TOKEN_REVOKED = 11;

        // Требуется дополнительно ввести код безопасности отправленный по email
        CODE_REQUIRED_EMAIL = 12;

        // Требуется дополнительно ввести код безопасности отправленный по sms
        CODE_REQUIRED_SMS = 13;

        // Доступ с данного IP-адреса запрещен
        IP_BLOCKED = 14;
    }
}

message RefreshTokenRequest {
}

message RefreshTokenResponse {
    // Результат запроса
    oneof response {
        // Результат запроса: JWT Токен
        string token = 1;

        // Результат запроса: ошибка при обновлении токена
        ErrorStatus error = 2;
    }

    enum ErrorStatus {
        // Внутренняя ошибка
        INTERNAL_ERROR = 0;

        // Неверный токен
        PAYLOAD_CHANGED = 1;

        // Доступ с данного IP-адреса запрещен.
        IP_BLOCKED = 2;

        // Временные работы, доступ запрещен
        ACCOUNT_ON_MAINTANCE = 3;

        // Аккаунт удален
        ACCOUNT_DELETED = 4;

        // Токен был отозван
        TOKEN_REVOKED = 5;
    }
}

message LogoutRequest {
}

message LogoutResponse {
}
